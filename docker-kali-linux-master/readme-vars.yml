---

# project information
project_name: kali-linux
project_url: "https://github.com/linuxserver/docker-kali-linux"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/kali-logo.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) - is an Advanced Penetration Testing Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments. KALI LINUX â„¢ is a trademark of OffSec.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}

# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/data", desc: "abc users home directory" }
param_usage_include_ports: true
param_ports:
  - { external_port: "3000", internal_port: "3000", port_desc: "Web Desktop GUI" }
  - { external_port: "3001", internal_port: "3001", port_desc: "Web Desktop GUI HTTPS" }
param_usage_include_env: true
param_env_vars:
  - { env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London"}
# optional variables
opt_param_usage_include_env: true
opt_param_env_vars:
  - { env_var: "SUBFOLDER", env_value: "/", desc: "Specify a subfolder to use with reverse proxies, IE `/subfolder/`"}
  - { env_var: "TITLE", env_value: "Kali Linux", desc: "String which will be used as page/tab title in the web browser." }
opt_param_usage_include_vols: true
opt_param_volumes:
  - { vol_path: "/var/run/docker.sock", vol_host_path: "/var/run/docker.sock", desc: "Docker Socket on the system, if you want to use Docker in the container" }
opt_custom_params:
  - { name: "shm-size", name_compose: "shm_size", value: "1gb",desc: "We set this to 1 gig to prevent modern web browsers from crashing" }
opt_security_opt_param: true
opt_security_opt_param_vars:
  - { run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function on older hosts as syscalls are unknown to Docker." }
opt_param_device_map: true
opt_param_devices:
  - { device_path: "/dev/dri", device_host_path: "/dev/dri", desc: "Add this for GL support (Linux hosts only)" }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  The Kali Linux image can be accessed at:

  * http://yourhost:3000/
  * https://yourhost:3001/

  **Modern GUI desktop apps (including some flavors terminals) have issues with the latest Docker and syscall compatibility, you can use Docker with the `--security-opt seccomp=unconfined` setting to allow these syscalls**

  ### Application management - PRoot Apps

  If you run system native installations of software IE `sudo apt-get install filezilla` and then upgrade or destroy/re-create the container that software will be removed and the container will be at a clean state. For some users that will be acceptable and they can update their system packages as well using system native commands like `apt-get upgrade`. If you want Docker to handle upgrading the container and retain your applications and settings we have created [proot-apps](https://github.com/linuxserver/proot-apps) which allow portable applications to be installed to persistent storage in the user's `$HOME` directory and they will work in a confined Docker environment out of the box. These applications and their settings will persist upgrades of the base container and can be mounted into different KasmVNC based containers on the fly facilitating virtual "Distro Hopping". In order to retain the same applications and settings install applications with `proot-apps install`. This can be achieved from the command line with:

  ```
  proot-apps install filezilla
  ```

  PRoot Apps is included in all KasmVNC based containers, a list of linuxserver.io supported applications is located [HERE](https://github.com/linuxserver/proot-apps?tab=readme-ov-file#supported-apps).

  ### Options in all KasmVNC based GUI containers

  This container is based on [Docker Baseimage KasmVNC](https://github.com/linuxserver/docker-baseimage-kasmvnc) which means there are additional environment variables and run configurations to enable or disable specific functionality.

  #### Optional environment variables

  | Variable | Description |
  | :----: | --- |
  | CUSTOM_PORT | Internal port the container listens on for http if it needs to be swapped from the default 3000. |
  | CUSTOM_HTTPS_PORT | Internal port the container listens on for https if it needs to be swapped from the default 3001. |
  | CUSTOM_USER | HTTP Basic auth username, abc is default. |
  | PASSWORD | HTTP Basic auth password, abc is default. If unset there will be no auth |
  | SUBFOLDER | Subfolder for the application if running a subfolder reverse proxy, need both slashes IE `/subfolder/` |
  | TITLE | The page title displayed on the web browser, default "KasmVNC Client". |
  | FM_HOME | This is the home directory (landing) for the file manager, default "/config". |
  | START_DOCKER | If set to false a container with privilege will not automatically start the DinD Docker setup. |
  | DRINODE | If mounting in /dev/dri for [DRI3 GPU Acceleration](https://www.kasmweb.com/kasmvnc/docs/master/gpu_acceleration.html) allows you to specify the device to use IE `/dev/dri/renderD128` |
  | DISABLE_IPV6 | If set to true or any value this will disable IPv6 | 
  | LC_ALL | Set the Language for the container to run as IE `fr_FR.UTF-8` `ar_AE.UTF-8` |
  | NO_DECOR | If set the application will run without window borders in openbox for use as a PWA. |
  | NO_FULL | Do not autmatically fullscreen applications when using openbox. |

  #### Optional run configurations

  | Variable | Description |
  | :----: | --- |
  | `--privileged` | Will start a Docker in Docker (DinD) setup inside the container to use docker in an isolated environment. For increased performance mount the Docker directory inside the container to the host IE `-v /home/user/docker-data:/var/lib/docker`. |
  | `-v /var/run/docker.sock:/var/run/docker.sock` | Mount in the host level Docker socket to either interact with it via CLI or use Docker enabled applications. |
  | `--device /dev/dri:/dev/dri` | Mount a GPU into the container, this can be used in conjunction with the `DRINODE` environment variable to leverage a host video card for GPU accelerated applications. Only **Open Source** drivers are supported IE (Intel,AMDGPU,Radeon,ATI,Nouveau) |

  ### Language Support - Internationalization

  The environment variable `LC_ALL` can be used to start this container in a different language than English simply pass for example to launch the Desktop session in French `LC_ALL=fr_FR.UTF-8`. Some languages like Chinese, Japanese, or Korean will be missing fonts needed to render properly known as cjk fonts, but others may exist and not be installed inside the container depending on what underlying distribution you are running. We only ensure fonts for Latin characters are present. Fonts can be installed with a mod on startup.

  To install cjk fonts on startup as an example pass the environment variables (Alpine base):

  ```
  -e DOCKER_MODS=linuxserver/mods:universal-package-install 
  -e INSTALL_PACKAGES=fonts-noto-cjk 
  -e LC_ALL=zh_CN.UTF-8
  ```

  The web interface has the option for "IME Input Mode" in Settings which will allow non english characters to be used from a non en_US keyboard on the client. Once enabled it will perform the same as a local Linux installation set to your locale.

  ### DRI3 GPU Acceleration

  For accelerated apps or games, render devices can be mounted into the container and leveraged by applications using:

  `--device /dev/dri:/dev/dri`

  This feature only supports **Open Source** GPU drivers:

  | Driver | Description |
  | :----: | --- |
  | Intel | i965 and i915 drivers for Intel iGPU chipsets |
  | AMD | AMDGPU, Radeon, and ATI drivers for AMD dedicated or APU chipsets |
  | NVIDIA | nouveau2 drivers only, closed source NVIDIA drivers lack DRI3 support |

  The `DRINODE` environment variable can be used to point to a specific GPU.
  Up to date information can be found [here](https://www.kasmweb.com/kasmvnc/docs/master/gpu_acceleration.html)

  #### Display Compositing (desktop effects)

  When using this image in tandem with a supported video card, compositing will function albeit with a performance hit when syncing the frames with pixmaps for the applications using it. This can greatly increase app compatibility if the application in question requires compositing, but requires a real GPU to be mounted into the container. By default we disable compositing at a DE level for performance reasons on our downstream images, but it can be enabled by the user and programs using compositing will still function even if the DE has it disabled in its settings. When building desktop images be sure you understand that with it enabled by default only users that have a compatible GPU mounted in will be able to use your image.

  ### Nvidia GPU Support

  Nvidia support is available by leveraging Zink for OpenGL support. This can be enabled with the following run flags:

  | Variable | Description |
  | :----: | --- |
  | --gpus all | This can be filtered down but for most setups this will pass the one Nvidia GPU on the system |
  | --runtime nvidia | Specify the Nvidia runtime which mounts drivers and tools in from the host |

  The compose syntax is slightly different for this as you will need to set nvidia as the default runtime:

  ```
  sudo nvidia-ctk runtime configure --runtime=docker --set-as-default
  sudo service docker restart
  ```

  And to assign the GPU in compose:

  ```
  services:
    kali:
      image: linuxserver/kali-linux:latest
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: 1
                capabilities: [compute,video,graphics,utility]
  ```

  ### Lossless mode

  This container is capable of delivering a true lossless image at a high framerate to your web browser by changing the Stream Quality preset to "Lossless", more information [here](https://www.kasmweb.com/docs/latest/how_to/lossless.html#technical-background). In order to use this mode from a non localhost endpoint the HTTPS port on 3001 needs to be used. If using a reverse proxy to port 3000 specific headers will need to be set as outlined [here](https://github.com/linuxserver/docker-baseimage-kasmvnc#lossless).

# changelog
changelogs:
  - { date: "18.07.24:", desc: "Initial release." }
